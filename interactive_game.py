#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞ —Å AI –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞–º–∏
"""

import json
import random
import sys
import os
import time
from typing import Dict, List, Optional, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º —Å–∏–º—É–ª—è—Ç–æ—Ä–∞
sys.path.append(os.path.join(os.path.dirname(__file__), 'simulator'))

from core import Game, Player, AI, Deck, Board


class HumanPlayer:
    """–ö–ª–∞—Å—Å –¥–ª—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –∏–≥—Ä–æ–∫–∞"""
    
    def __init__(self, player: Player):
        self.player = player
        
    def choose_profile(self, available_profiles: List[Dict]) -> Dict:
        """–í—ã–±–æ—Ä –ø—Ä–æ—Ñ–∏–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        print("\nüé≠ –í–´–ë–û–† –ü–ï–†–°–û–ù–ê–ñ–ê:")
        print("=" * 50)
        
        for i, profile in enumerate(available_profiles, 1):
            print(f"{i}. {profile['name']}")
            print(f"   üí∞ –î–µ–Ω—å–≥–∏: {profile['starting_money']}")
            print(f"   üß† –ù–µ—Ä–≤—ã: {profile['starting_nerves']}")
            print(f"   üó£Ô∏è –Ø–∑—ã–∫: {profile['starting_language']}")
            print(f"   üè† –ñ–∏–ª—å–µ: {profile['starting_housing']}")
            print()
            
        while True:
            try:
                choice = int(input("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–Ω–æ–º–µ—Ä): ")) - 1
                if 0 <= choice < len(available_profiles):
                    return available_profiles[choice]
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä!")
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
    
    def choose_goal(self, goals: Dict) -> str:
        """–í—ã–±–æ—Ä —Ü–µ–ª–∏ –∏–≥—Ä—ã"""
        print("\nüéØ –í–´–ë–û–† –¶–ï–õ–ò –ò–ì–†–´:")
        print("=" * 50)
        
        goal_list = list(goals.items())
        for i, (key, goal) in enumerate(goal_list, 1):
            print(f"{i}. {goal['description']}")
            
        while True:
            try:
                choice = int(input("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å (–Ω–æ–º–µ—Ä): ")) - 1
                if 0 <= choice < len(goal_list):
                    goal_key, goal_data = goal_list[choice]
                    return goal_key
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä!")
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
    
    def decide_green_card_use(self, card: Dict) -> str:
        """–†–µ—à–µ–Ω–∏–µ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –∑–µ–ª–µ–Ω–æ–π –∫–∞—Ä—Ç—ã"""
        print(f"\nüíö –ó–ï–õ–ï–ù–ê–Ø –ö–ê–†–¢–ê: {card['name']}")
        print(f"üìù {card['description']}")
        
        if card.get('exchange_instruction'):
            print("\n‚öñÔ∏è –í–ê–†–ò–ê–ù–¢–´:")
            print("1. –û–±–º–µ–Ω—è—Ç—å –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            print("2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ —Å–æ–±—ã—Ç–∏–µ")
            
            while True:
                try:
                    choice = int(input("–í–∞—à –≤—ã–±–æ—Ä (1-2): "))
                    if choice == 1:
                        return 'exchange'
                    elif choice == 2:
                        return 'event'
                    else:
                        print("‚ùå –í–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2!")
                except ValueError:
                    print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        else:
            input("üìú –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞...")
            return 'event'
    
    def decide_draw_choice(self) -> str:
        """–í—ã–±–æ—Ä –º–µ–∂–¥—É –∑–µ–ª–µ–Ω–æ–π –∫–∞—Ä—Ç–æ–π, –∫–∞—Ä—Ç–æ–π –¥–µ–π—Å—Ç–≤–∏—è –∏ –ø—Ä–µ–¥–º–µ—Ç–æ–º"""
        print("\nüé¥ –í–´–ë–û–† –ö–ê–†–¢–´:")
        print("1. –í–∑—è—Ç—å –∑–µ–ª–µ–Ω—É—é –∫–∞—Ä—Ç—É (–¥–æ–∫—É–º–µ–Ω—Ç—ã/—Ä–∞–±–æ—Ç–∞)")
        print("2. –í–∑—è—Ç—å –∫–∞—Ä—Ç—É –¥–µ–π—Å—Ç–≤–∏—è (—Å–æ–±—ã—Ç–∏–µ –¥–ª—è –≤—Å–µ—Ö)")
        print("3. –í–∑—è—Ç—å –ø—Ä–µ–¥–º–µ—Ç (–ª–∏—á–Ω–∞—è —à–º–æ—Ç–∫–∞)")
        
        while True:
            try:
                choice = int(input("–í–∞—à –≤—ã–±–æ—Ä (1-3): "))
                if choice == 1:
                    return 'draw_green'
                elif choice == 2:
                    return 'draw_action'
                elif choice == 3:
                    return 'draw_item'
                else:
                    print("‚ùå –í–≤–µ–¥–∏—Ç–µ 1, 2 –∏–ª–∏ 3!")
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
    
    def decide_play_action_card(self, when: str = 'start_of_turn') -> Optional[Dict]:
        """–†–µ—à–µ–Ω–∏–µ –æ —Ä–∞–∑—ã–≥—Ä—ã–≤–∞–Ω–∏–∏ –∫–∞—Ä—Ç—ã –¥–µ–π—Å—Ç–≤–∏—è"""
        available_cards = [card for card in self.player.action_cards 
                          if card.get('when_to_play', 'anytime') in ['anytime', when]]
        
        if not available_cards:
            return None
            
        print(f"\nüéØ –ö–ê–†–¢–´ –î–ï–ô–°–¢–í–ò–Ø ({len(available_cards)} –¥–æ—Å—Ç—É–ø–Ω–æ):")
        print("0. –ù–µ –∏–≥—Ä–∞—Ç—å –∫–∞—Ä—Ç—É")
        
        for i, card in enumerate(available_cards, 1):
            cost_str = ""
            if 'cost' in card:
                costs = []
                for resource, amount in card['cost'].items():
                    costs.append(f"{amount} {resource}")
                cost_str = f" (—Å—Ç–æ–∏—Ç: {', '.join(costs)})"
            
            print(f"{i}. {card['name']}{cost_str}")
            print(f"   üìù {card['description']}")
        
        while True:
            try:
                choice = int(input("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É (–Ω–æ–º–µ—Ä): "))
                if choice == 0:
                    return None
                elif 1 <= choice <= len(available_cards):
                    return available_cards[choice - 1]
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä!")
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
    
    def decide_interference(self, event):
        """–†–µ—à–µ–Ω–∏–µ –æ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–µ –≤ –¥–µ–π—Å—Ç–≤–∏–µ –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞"""
        if event.acting_player == self.player:
            return None
            
        # –ù–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫–∞—Ä—Ç—ã –¥–ª—è –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞
        suitable_cards = []
        for i, card in enumerate(self.player.action_cards):
            if card.get('type') == 'interference':
                suitable_cards.append((i, card))
            elif card.get('when_to_play') == 'instant_response':
                suitable_cards.append((i, card))
            elif 'block_' in str(card.get('effects', {})):
                suitable_cards.append((i, card))
        
        if not suitable_cards:
            return None
            
        print(f"\n‚ö° –í–û–ó–ú–û–ñ–ù–û–°–¢–¨ –í–ú–ï–®–ê–¢–ï–õ–¨–°–¢–í–ê!")
        print(f"üì¢ {event.description}")
        print(f"\nüÉè –í–∞—à–∏ –∫–∞—Ä—Ç—ã –¥–ª—è –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞:")
        
        for i, (idx, card) in enumerate(suitable_cards, 1):
            cost_text = ""
            if 'cost' in card:
                cost_parts = []
                if 'money' in card['cost']:
                    cost_parts.append(f"{card['cost']['money']} üí∞")
                if 'nerves' in card['cost']:
                    cost_parts.append(f"{card['cost']['nerves']} üß†")
                if cost_parts:
                    cost_text = f" (–°—Ç–æ–∏–º–æ—Å—Ç—å: {', '.join(cost_parts)})"
                    
            print(f"{i}. {card['name']}{cost_text}")
            print(f"   üìù {card['description']}")
            
        print(f"{len(suitable_cards) + 1}. –ù–µ –≤–º–µ—à–∏–≤–∞—Ç—å—Å—è")
        
        while True:
            try:
                choice = int(input("–í–∞—à –≤—ã–±–æ—Ä: "))
                if choice == len(suitable_cards) + 1:
                    return None
                elif 1 <= choice <= len(suitable_cards):
                    card_idx, selected_card = suitable_cards[choice - 1]
                    
                    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ –∑–∞–ø–ª–∞—Ç–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å
                    cost = selected_card.get('cost', {})
                    if 'money' in cost and self.player.money < cost['money']:
                        print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥! –ù—É–∂–Ω–æ: {cost['money']}, –µ—Å—Ç—å: {self.player.money}")
                        continue
                    if 'nerves' in cost and self.player.nerves <= cost['nerves']:
                        print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–µ—Ä–≤–æ–≤! –ù—É–∂–Ω–æ: {cost['nerves']}, –µ—Å—Ç—å: {self.player.nerves}")
                        continue
                        
                    return (selected_card, True)
                else:
                    print(f"‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(suitable_cards) + 1}!")
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
    
    def decide_defense(self, event, interference_card):
        """–†–µ—à–µ–Ω–∏–µ –æ –∑–∞—â–∏—Ç–µ –æ—Ç –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞"""
        # –ù–∞–π—Ç–∏ –∑–∞—â–∏—Ç–Ω—ã–µ –∫–∞—Ä—Ç—ã
        defense_cards = []
        for i, card in enumerate(self.player.action_cards):
            effects = card.get('effects', {})
            if effects.get('block_sabotage') or effects.get('reflect_sabotage'):
                defense_cards.append((i, card))
        
        if not defense_cards:
            return None
            
        print(f"\nüõ°Ô∏è –í–û–ó–ú–û–ñ–ù–û–°–¢–¨ –ó–ê–©–ò–¢–´!")
        print(f"‚öîÔ∏è {interference_card['name']} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ—Ç–∏–≤ –≤–∞—Å!")
        print(f"\nüÉè –í–∞—à–∏ –∑–∞—â–∏—Ç–Ω—ã–µ –∫–∞—Ä—Ç—ã:")
        
        for i, (idx, card) in enumerate(defense_cards, 1):
            cost_text = ""
            if 'cost' in card:
                cost_parts = []
                if 'money' in card['cost']:
                    cost_parts.append(f"{card['cost']['money']} üí∞")
                if 'nerves' in card['cost']:
                    cost_parts.append(f"{card['cost']['nerves']} üß†")
                if cost_parts:
                    cost_text = f" (–°—Ç–æ–∏–º–æ—Å—Ç—å: {', '.join(cost_parts)})"
                    
            print(f"{i}. {card['name']}{cost_text}")
            print(f"   üìù {card['description']}")
            
        print(f"{len(defense_cards) + 1}. –ù–µ –∑–∞—â–∏—â–∞—Ç—å—Å—è")
        
        while True:
            try:
                choice = int(input("–í–∞—à –≤—ã–±–æ—Ä: "))
                if choice == len(defense_cards) + 1:
                    return None
                elif 1 <= choice <= len(defense_cards):
                    card_idx, selected_card = defense_cards[choice - 1]
                    
                    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å
                    cost = selected_card.get('cost', {})
                    if 'money' in cost and self.player.money < cost['money']:
                        print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥! –ù—É–∂–Ω–æ: {cost['money']}, –µ—Å—Ç—å: {self.player.money}")
                        continue
                    if 'nerves' in cost and self.player.nerves <= cost['nerves']:
                        print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–µ—Ä–≤–æ–≤! –ù—É–∂–Ω–æ: {cost['nerves']}, –µ—Å—Ç—å: {self.player.nerves}")
                        continue
                        
                    return (selected_card, True)
                else:
                    print(f"‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(defense_cards) + 1}!")
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")


class InteractiveGame(Game):
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è –∏–≥—Ä—ã"""
    
    def __init__(self):
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config_path = os.path.join(os.path.dirname(__file__), 'simulator', 'config.json')
        with open(config_path, 'r', encoding='utf-8') as f:
            config = json.load(f)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç
        base_path = os.path.dirname(__file__)
        game_data = {}
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã –∫–∞—Ä—Ç –∏ –¥–∞–Ω–Ω—ã–µ
        card_files = {
            'action_cards': 'actionCartds/action_cards.json',
            'item_cards': 'itemCards/personal_items.json',
            'green_cards': 'greenCards/documents_work_cards.json', 
            'health_cards': 'redCards/health_cards.json',
            'housing_cards': 'redCards/housing_cards.json',
            'random_events': 'whiteCards/random_events.json',
            'game_constants': 'Common/game_constants.json'
        }
        
        for key, filename in card_files.items():
            file_path = os.path.join(base_path, filename)
            with open(file_path, 'r', encoding='utf-8') as f:
                game_data[key] = json.load(f)
        
        super().__init__(config, game_data)
        self.human_player = None
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–¥—É –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        from simulator.core import Deck
        self.decks['item'] = Deck(game_data['item_cards']['personal_items'])
        
        # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–∞—Ä—Ç –¥–µ–π—Å—Ç–≤–∏—è –≤ AI —Ö–æ–¥–∞—Ö
        self._original_action_card_handler = None
        
    def setup_game(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–≥—Ä—ã"""
        print("üéÆ –î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨ –í –ò–ì–†–£ '–ñ–ò–ó–ù–¨ –í –ò–°–ü–ê–ù–ò–ò'!")
        print("=" * 60)
        
        # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤, —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–º –∫–ª–∞—Å—Å–æ–º
        self.players = []
        
        # –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ AI –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤
        while True:
            try:
                num_ai = int(input("–°–∫–æ–ª—å–∫–æ AI –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤? (1-7): "))
                if 1 <= num_ai <= 7:
                    break
                else:
                    print("‚ùå –û—Ç 1 –¥–æ 7 –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤!")
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        
        # –í—ã–±–æ—Ä –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –∏–≥—Ä–æ–∫–∞
        available_profiles = self.config['character_profiles'].copy()
        
        human_ai = HumanPlayer(None)
        player_profile = human_ai.choose_profile(available_profiles)
        available_profiles.remove(player_profile)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–∞-—á–µ–ª–æ–≤–µ–∫–∞
        human_player_obj = Player(player_profile, None, self.config, self.game_data['game_constants'])
        human_player_obj.ai = AI(human_player_obj, self.config)
        human_player_obj.name = f"üßë {player_profile['name']} (–í–´)"
        self.human_player = HumanPlayer(human_player_obj)
        human_player_obj.human_controller = self.human_player  # –°–≤—è–∑—ã–≤–∞–µ–º –¥–ª—è InteractionManager
        self.players.append(human_player_obj)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ AI –∏–≥—Ä–æ–∫–æ–≤
        ai_profiles = random.sample(available_profiles, num_ai)
        for i, profile in enumerate(ai_profiles):
            ai_player = Player(profile, None, self.config, self.game_data['game_constants'])
            ai_player.ai = AI(ai_player, self.config)
            ai_player.name = f"ü§ñ {profile['name']} (AI-{i+1})"
            self.players.append(ai_player)
        
        # –†–∞–∑–¥–∞–µ–º –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É –ø–æ 3 –ø—Ä–µ–¥–º–µ—Ç–∞
        self.deal_starting_items()
        
        print(f"\nüë• –£–ß–ê–°–¢–ù–ò–ö–ò –ò–ì–†–´ ({len(self.players)} –∏–≥—Ä–æ–∫–æ–≤):")
        for player in self.players:
            print(f"   {player.name}")
        
        input("\nüöÄ –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã...")
    
    def deal_starting_items(self):
        """–†–∞–∑–¥–∞–µ—Ç –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É –ø–æ 3 –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã"""
        print("\nüéí –†–ê–ó–î–ê–ß–ê –°–¢–ê–†–¢–û–í–´–• –ü–†–ï–î–ú–ï–¢–û–í...")
        
        for player in self.players:
            # –û—á–∏—â–∞–µ–º –∫–∞—Ä—Ç—ã –¥–µ–π—Å—Ç–≤–∏—è, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã
            player.action_cards = []
            
            items_received = []
            for i in range(3):
                item_card = self.decks['item'].draw()
                if item_card:
                    player.add_action_card(item_card)
                    items_received.append(item_card['name'])
            
            is_human = player == self.human_player.player
            prefix = "üßë –í–´" if is_human else f"ü§ñ {player.name.split(' (')[0]}"
            print(f"   {prefix} –ø–æ–ª—É—á–∏–ª: {', '.join(items_received)}")
        
        print("‚úÖ –°—Ç–∞—Ä—Ç–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã —Ä–æ–∑–¥–∞–Ω—ã!")
    
    def display_game_state(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã"""
        print("\n" + "üéÆ" * 40)
        print(f"üéØ –•–û–î {self.turn + 1} | ‚è±Ô∏è –ú–∞–∫—Å–∏–º—É–º —Ö–æ–¥–æ–≤: {len(self.players) * 15}")
        print("üéÆ" * 40)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –ø–∞–Ω–µ–ª—å —Å—Ç–∞—Ç—É—Å–∞
        pass  # –ü–∞–Ω–µ–ª—å —É–∂–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –Ω–æ–≤–æ–º –º–µ—Ç–æ–¥–µ
    
    def display_player_status_panel(self, player):
        """–ü–æ–¥—Ä–æ–±–Ω–∞—è –ø–∞–Ω–µ–ª—å —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞-—á–µ–ª–æ–≤–µ–∫–∞"""
        print(f"\n{'üßë –í–ê–® –°–¢–ê–¢–£–°':^80}")
        print("üî∏" * 80)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –≤ –∫—Ä–∞—Å–∏–≤–æ–π —Ç–∞–±–ª–∏—Ü–µ
        print(f"‚îå‚îÄ üí∞ –î–ï–ù–¨–ì–ò: {player.money:>3} ‚îÇ üß† –ù–ï–†–í–´: {player.nerves:>2} ‚îÇ üìÑ –î–û–ö–£–ú–ï–ù–¢–´: {player.document_cards} (—É—Ä–æ–≤–µ–Ω—å {player.document_level}) ‚îÇ üó£Ô∏è –Ø–ó–´–ö: {player.language_level} ‚îÄ‚îê")
        print(f"‚îÇ üè† –ñ–ò–õ–¨–ï: {player.housing:<12} ‚îÇ üìç –ü–û–ó–ò–¶–ò–Ø: {player.position:>2} ‚îÇ üé¥ –ü–†–ï–î–ú–ï–¢–û–í: {len(player.action_cards):>2}                                ‚îÇ")
        print("‚îî‚îÄ" + "‚îÄ" * 76 + "‚îÄ‚îò")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–ª–∏ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        if player.win_condition:
            print(f"\nüéØ –í–ê–®–ê –¶–ï–õ–¨: {player.win_condition['description']}")
            self.display_goal_progress(player)
        else:
            print(f"\nüéØ –¶–ï–õ–¨: ‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–∞ (–Ω—É–∂–µ–Ω —É—Ä–æ–≤–µ–Ω—å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ 5)")
            docs_needed = 5 - player.document_level
            print(f"   üìÑ –î–æ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏: {docs_needed} —É—Ä–æ–≤–Ω–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        # –ü—Ä–µ–¥–º–µ—Ç—ã –≤ —Ä—É–∫–µ
        if player.action_cards:
            print(f"\nüéí –ü–†–ï–î–ú–ï–¢–´ –í –†–£–ö–ï ({len(player.action_cards)}):")
            for i, card in enumerate(player.action_cards, 1):
                cost_info = ""
                if 'cost' in card:
                    costs = []
                    for resource, amount in card['cost'].items():
                        if resource == 'skip_turn':
                            costs.append("–ø—Ä–æ–ø—É—Å–∫ —Ö–æ–¥–∞")
                        else:
                            costs.append(f"{amount} {resource}")
                    cost_info = f" (üí∞ {', '.join(costs)})"
                print(f"   {i}. {card['name']}{cost_info}")
        else:
            print(f"\nüéí –ü–†–ï–î–ú–ï–¢–´: –ü—É—Å—Ç–æ")
    
    def display_goal_progress(self, player):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é —Ü–µ–ª–∏"""
        if not player.win_condition:
            return
        
        requirements = player.win_condition['requires']
        print("   üìä –ü–†–û–ì–†–ï–°–° –ö –¶–ï–õ–ò:")
        
        for req_type, req_value in requirements.items():
            if req_type == 'housing_type':
                current = "‚úÖ" if player.housing == req_value else f"‚ùå –Ω—É–∂–Ω–æ: {req_value}"
                print(f"      üè† –ñ–∏–ª—å–µ: {current}")
            elif req_type == 'document_level':
                current = player.document_level
                status = "‚úÖ" if current >= req_value else f"‚ùå {current}/{req_value}"
                print(f"      üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã: {status}")
            elif req_type == 'language_level':
                current = player.language_level
                status = "‚úÖ" if current >= req_value else f"‚ùå {current}/{req_value}"
                print(f"      üó£Ô∏è –Ø–∑—ã–∫: {status}")
            elif req_type == 'money':
                current = player.money
                status = "‚úÖ" if current >= req_value else f"‚ùå {current}/{req_value}"
                print(f"      üí∞ –î–µ–Ω—å–≥–∏: {status}")
            elif req_type == 'nerves':
                current = player.nerves
                status = "‚úÖ" if current >= req_value else f"‚ùå {current}/{req_value}"
                print(f"      üß† –ù–µ—Ä–≤—ã: {status}")
    
    def get_goal_completion_percentage(self, player):
        """–í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–µ–ª–∏"""
        if not player.win_condition:
            return 0.0
        
        requirements = player.win_condition['requires']
        completed_requirements = 0
        total_requirements = len(requirements)
        
        for req_type, req_value in requirements.items():
            if req_type == 'housing_type':
                if player.housing == req_value:
                    completed_requirements += 1
            elif req_type == 'document_level':
                if player.document_level >= req_value:
                    completed_requirements += 1
            elif req_type == 'language_level':
                if player.language_level >= req_value:
                    completed_requirements += 1
            elif req_type == 'money':
                if player.money >= req_value:
                    completed_requirements += 1
            elif req_type == 'nerves':
                if player.nerves >= req_value:
                    completed_requirements += 1
        
        return (completed_requirements / total_requirements) * 100
    
    def play_human_turn(self, player):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–æ–¥–∞ —á–µ–ª–æ–≤–µ–∫–∞"""
        print(f"\n{'üéØ –í–ê–® –•–û–î!':^80}")
        print("üîπ" * 80)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–¥ —Ö–æ–¥–æ–º
        print(f"\nüìä –¢–ï–ö–£–©–ò–ô –°–¢–ê–¢–£–°:")
        print(f"   üí∞ –î–µ–Ω—å–≥–∏: {player.money} | üß† –ù–µ—Ä–≤—ã: {player.nerves} | üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã: L{player.document_level}({player.document_cards}) | üó£Ô∏è –Ø–∑—ã–∫: {player.language_level}")
        
        if player.win_condition:
            completion = self.get_goal_completion_percentage(player)
            print(f"   üéØ –ü—Ä–æ–≥—Ä–µ—Å—Å –∫ —Ü–µ–ª–∏: {completion:.1f}% ({'üî• –ë–õ–ò–ó–ö–û –ö –ü–û–ë–ï–î–ï!' if completion >= 80 else 'üìà –í –ø—Ä–æ—Ü–µ—Å—Å–µ'})")
        
        if player.action_cards:
            print(f"   üéí –ü—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ —Ä—É–∫–µ: {len(player.action_cards)}")
            print("   üìù –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤:")
            for i, card in enumerate(player.action_cards, 1):
                when_play = card.get('when_to_play', 'anytime')
                print(f"      {i}. {card['name']} (–∏–≥—Ä–∞—Ç—å: {when_play})")
        
        print()
        
        # 1. –í—ã–±–æ—Ä –∫–∞—Ä—Ç—ã –¥–µ–π—Å—Ç–≤–∏—è –≤ –Ω–∞—á–∞–ª–µ —Ö–æ–¥–∞
        action_card = self.human_player.decide_play_action_card('start_of_turn')
        if action_card:
            print(f"\nüéØ –ò–≥—Ä–∞–µ—Ç–µ –∫–∞—Ä—Ç—É: {action_card['name']}")
            self.apply_card_effect(player, action_card, 'event')
            player.action_cards.remove(action_card)
            self.decks['action'].discard(action_card)
        
        # 2. –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞ –∏ –¥–≤–∏–∂–µ–Ω–∏–µ
        input("\nüé≤ –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞...")
        roll = random.randint(1, 6)
        print(f"üé≤ –í—ã–ø–∞–ª–æ: {roll}")
        
        old_position = player.position
        player.position = (player.position + roll) % self.board.size
        print(f"üìç –ü–µ—Ä–µ–º–µ—Å—Ç–∏–ª–∏—Å—å —Å {old_position} –Ω–∞ {player.position}")
        
        # 3. –§–∞–∑–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ (—É–ø—Ä–æ—â–µ–Ω–∞ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã)
        print("\nüíº –§–∞–∑–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ –ø—Ä–æ–ø—É—â–µ–Ω–∞ –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –≤–µ—Ä—Å–∏–∏")
        
        # 4. –≠—Ñ—Ñ–µ–∫—Ç –∫–ª–µ—Ç–∫–∏
        cell_type = self.board.get_cell_type(player.position)
        print(f"\nüìç –ü–æ–ø–∞–ª–∏ –Ω–∞ –∫–ª–µ—Ç–∫—É: {cell_type}")
        
        if cell_type == 'green':
            choice = self.human_player.decide_draw_choice()
            if choice == 'draw_green':
                card = self.decks['green'].draw()
                if card:
                    print(f"\nüíö –ü–æ–ª—É—á–∏–ª–∏ –∑–µ–ª–µ–Ω—É—é –∫–∞—Ä—Ç—É: {card['name']}")
                    use_decision = self.human_player.decide_green_card_use(card)
                    self.apply_card_effect(player, card, use_decision)
            elif choice == 'draw_action':
                action_card = self.decks['action'].draw()
                if action_card:
                    self.handle_action_card_draw_human(player, action_card)
            elif choice == 'draw_item':
                item_card = self.decks['item'].draw()
                if item_card:
                    print(f"\nüéí –ü–æ–ª—É—á–∏–ª–∏ –ø—Ä–µ–¥–º–µ—Ç: {item_card['name']}")
                    print(f"üìù {item_card['description']}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å, –µ—Å–ª–∏ –µ—Å—Ç—å
                    if 'cost' in item_card:
                        costs = []
                        for resource, amount in item_card['cost'].items():
                            if resource == 'skip_turn':
                                costs.append("–ø—Ä–æ–ø—É—Å–∫ —Ö–æ–¥–∞")
                            else:
                                costs.append(f"{amount} {resource}")
                        print(f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {', '.join(costs)}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–≥–¥–∞ –º–æ–∂–Ω–æ –∏–≥—Ä–∞—Ç—å
                    when_to_play = item_card.get('when_to_play', 'anytime')
                    if when_to_play == 'start_of_turn':
                        print("‚è∞ –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: –≤ –Ω–∞—á–∞–ª–µ —Ö–æ–¥–∞")
                    elif when_to_play == 'anytime':
                        print("‚è∞ –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è")
                    elif when_to_play == 'anytime_or_defensive':
                        print("‚è∞ –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –∏–ª–∏ –∫–∞–∫ –∑–∞—â–∏—Ç—É")
                    
                    player.add_action_card(item_card)
                    print(f"üé¥ –ü—Ä–µ–¥–º–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä—É–∫—É (–≤—Å–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {len(player.action_cards)})")
                    
                    input("üìú –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
        
        elif cell_type in ['red', 'white']:
            card = self.decks[cell_type].draw()
            if card:
                color_emoji = "‚ù§Ô∏è" if cell_type == 'red' else "ü§ç"
                print(f"\n{color_emoji} –ü–æ–ª—É—á–∏–ª–∏ –∫–∞—Ä—Ç—É: {card['name']}")
                print(f"üìù {card['description']}")
                input("üéØ –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞...")
                self.apply_card_effect(player, card, 'event')
        
        # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏
        if not player.win_condition and player.document_level >= 5:
            print(f"\nüéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —É—Ä–æ–≤–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ {player.document_level}!")
            print("–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ü–µ–ª—å –∏–≥—Ä—ã!")
            
            goal_key = self.human_player.choose_goal(self.config['win_conditions'])
            goal_data = self.config['win_conditions'][goal_key].copy()
            goal_data['key'] = goal_key
            player.win_condition = goal_data
            print(f"\nüéØ –í—ã–±—Ä–∞–Ω–Ω–∞—è —Ü–µ–ª—å: {goal_data['description']}")
        
        # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã
        self.check_win_condition(player)
        if not self.game_over:
            self.check_elimination(player)
    
    def play_ai_turn(self, player):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–æ–¥–∞ AI (—Å –≤—ã–≤–æ–¥–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)"""
        print(f"\nü§ñ –•–æ–¥ AI: {player.name}")
        print("-" * 60)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å AI –∏–≥—Ä–æ–∫–∞
        goal_text = player.win_condition['description'][:40] + "..." if player.win_condition else "–¶–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞"
        print(f"   üìä –°—Ç–∞—Ç—É—Å: üí∞{player.money} | üß†{player.nerves} | üìÑL{player.document_level}({player.document_cards}) | üó£Ô∏è{player.language_level} | üè†{player.housing}")
        print(f"   üéØ –¶–µ–ª—å: {goal_text}")
        
        print("   ‚è∏Ô∏è  AI –¥–µ–ª–∞–µ—Ç —Ö–æ–¥...")
        time.sleep(1)
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–∞—Ä—Ç –¥–µ–π—Å—Ç–≤–∏—è
        original_add_action_card = player.add_action_card
        
        def custom_add_action_card(card):
            """–ü–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞—Ä—Ç –¥–µ–π—Å—Ç–≤–∏—è AI"""
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–∞—Ä—Ç—ã –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
            is_global_event = self.is_global_event_card(card)
            
            if is_global_event:
                # –≠—Ç–æ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –≤—Å–µ—Ö - –¥–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å
                print(f"üì¢ –°–û–ë–´–¢–ò–ï –î–õ–Ø –í–°–ï–• –ò–ì–†–û–ö–û–í: {card['name']}")
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –∫–æ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–µ–∞–∫—Ü–∏–∏
                self.apply_global_event_with_reactions(card)
                
                self.decks['action'].discard(card)
            
            else:
                # –≠—Ç–æ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ä—É–∫—É –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
                print(f"üéí –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è {player.name}")
                original_add_action_card(card)
        
        player.add_action_card = custom_add_action_card
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ª–æ–≥–∏–∫—É AI –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞
            super().take_turn(player)
        finally:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
            player.add_action_card = original_add_action_card
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ö–æ–¥–∞
        print(f"\n   üìà –†–ï–ó–£–õ–¨–¢–ê–¢ –•–û–î–ê:")
        print(f"      üí∞ –î–µ–Ω—å–≥–∏: {player.money} | üß† –ù–µ—Ä–≤—ã: {player.nerves} | üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã: L{player.document_level}({player.document_cards})")
        if player.win_condition:
            print(f"      üéØ –ü—Ä–æ–≥—Ä–µ—Å—Å –∫ —Ü–µ–ª–∏: {self.get_goal_completion_percentage(player):.1f}%")
        
        print("   ‚úÖ –•–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω")
        time.sleep(0.5)
    
    def handle_action_card_draw_human(self, player, action_card):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —á–µ–ª–æ–≤–µ–∫–∞"""
        print(f"\nüéØ –ü–æ–ª—É—á–∏–ª–∏ –∫–∞—Ä—Ç—É –¥–µ–π—Å—Ç–≤–∏—è: {action_card['name']}")
        print(f"üìù {action_card['description']}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–∞—Ä—Ç—ã –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
        is_global_event = self.is_global_event_card(action_card)
        
        if is_global_event:
            # –≠—Ç–æ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –≤—Å–µ—Ö - –¥–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å
            print(f"\nüì¢ –°–û–ë–´–¢–ò–ï –î–õ–Ø –í–°–ï–• –ò–ì–†–û–ö–û–í!")
            input("üìú –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞...")
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –∫–æ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–µ–∞–∫—Ü–∏–∏
            self.apply_global_event_with_reactions(action_card)
            
            self.decks['action'].discard(action_card)
        
        else:
            # –≠—Ç–æ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ä—É–∫—É
            print(f"\nüéí –û–î–ù–û–†–ê–ó–û–í–´–ô –ü–†–ï–î–ú–ï–¢!")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å, –µ—Å–ª–∏ –µ—Å—Ç—å
            if 'cost' in action_card:
                costs = []
                for resource, amount in action_card['cost'].items():
                    costs.append(f"{amount} {resource}")
                print(f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {', '.join(costs)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–≥–¥–∞ –º–æ–∂–Ω–æ –∏–≥—Ä–∞—Ç—å
            when_to_play = action_card.get('when_to_play', 'anytime')
            if when_to_play == 'start_of_turn':
                print("‚è∞ –ú–æ–∂–Ω–æ —Å—ã–≥—Ä–∞—Ç—å: –≤ –Ω–∞—á–∞–ª–µ —Ö–æ–¥–∞")
            elif when_to_play == 'anytime':
                print("‚è∞ –ú–æ–∂–Ω–æ —Å—ã–≥—Ä–∞—Ç—å: –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è")
            
            player.add_action_card(action_card)
            print(f"üé¥ –ü—Ä–µ–¥–º–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä—É–∫—É (–≤—Å–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {len(player.action_cards)})")
        
        input("üìú –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

    def is_global_event_card(self, card):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–∞—Ä—Ç–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã–º —Å–æ–±—ã—Ç–∏–µ–º"""
        # –ö–∞—Ä—Ç—ã —Å conditions (—É—Å–ª–æ–≤–∏—è–º–∏ –¥–ª—è –≥—Ä—É–ø–ø –∏–≥—Ä–æ–∫–æ–≤) - —ç—Ç–æ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –≤—Å–µ—Ö
        if 'conditions' in card and 'character_id' in card.get('conditions', {}):
            return True
        
        # –ö–∞—Ä—Ç—ã —Å —Ç–∏–ø–æ–º instant –ò –±–µ–∑ cost - —ç—Ç–æ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –≤—Å–µ—Ö
        if card.get('type') == 'instant' and 'cost' not in card:
            return True
        
        # –í–°–ï –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã - —ç—Ç–æ –ª–∏—á–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã (–≤–∫–ª—é—á–∞—è –∫–∞—Ä—Ç—ã —Å cost, utility, interference –∏ —Ç.–¥.)
        return False

    def apply_global_event_with_reactions(self, event_card):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –≤—Å–µ—Ö —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–µ–∞–∫—Ü–∏–π"""
        print(f"\nüåç –ì–õ–û–ë–ê–õ–¨–ù–û–ï –°–û–ë–´–¢–ò–ï: {event_card['name']}")
        print(f"üìù {event_card['description']}")
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å
        reactive_players = []
        for target_player in self.players:
            if not target_player.is_eliminated:
                reactive_players.append(target_player)
        
        # –§–∞–∑–∞ —Ä–µ–∞–∫—Ü–∏–π - –∫–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞—â–∏—Ç–Ω—ã–µ –∫–∞—Ä—Ç—ã
        protected_players = set()
        
        for reactive_player in reactive_players:
            # –ò—â–µ–º –∑–∞—â–∏—Ç–Ω—ã–µ –∫–∞—Ä—Ç—ã –≤ —Ä—É–∫–µ –∏–≥—Ä–æ–∫–∞
            defensive_cards = [card for card in reactive_player.action_cards 
                             if card.get('type') == 'defensive']
            
            if defensive_cards:
                if reactive_player == self.human_player.player:
                    # –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –∏–≥—Ä–æ–∫
                    print(f"\nüõ°Ô∏è {reactive_player.name}, —É –≤–∞—Å –µ—Å—Ç—å –∑–∞—â–∏—Ç–Ω—ã–µ –∫–∞—Ä—Ç—ã!")
                    for i, card in enumerate(defensive_cards):
                        print(f"{i+1}. {card['name']} - {card['description']}")
                    
                    print("0. –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞—â–∏—Ç—É")
                    choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É –¥–ª—è –∑–∞—â–∏—Ç—ã (0-{0}): ".format(len(defensive_cards)))
                    
                    try:
                        choice_idx = int(choice)
                        if 1 <= choice_idx <= len(defensive_cards):
                            defense_card = defensive_cards[choice_idx - 1]
                            print(f"üõ°Ô∏è {reactive_player.name} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç {defense_card['name']}!")
                            
                            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞—â–∏—Ç–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç
                            self.apply_card_effect(reactive_player, defense_card, 'action')
                            reactive_player.action_cards.remove(defense_card)
                            protected_players.add(reactive_player)
                    except (ValueError, IndexError):
                        print("üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –∑–∞—â–∏—Ç–∞ –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞")
                
                else:
                    # AI –∏–≥—Ä–æ–∫
                    # AI —Ä–µ—à–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ –∑–∞—â–∏—Ç—É
                    if self.should_ai_use_defense(reactive_player, event_card, defensive_cards):
                        defense_card = defensive_cards[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é
                        print(f"üõ°Ô∏è {reactive_player.name} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç {defense_card['name']}!")
                        
                        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞—â–∏—Ç–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç
                        self.apply_card_effect(reactive_player, defense_card, 'action')
                        reactive_player.action_cards.remove(defense_card)
                        protected_players.add(reactive_player)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ –∫–æ –≤—Å–µ–º –Ω–µ–∑–∞—â–∏—â–µ–Ω–Ω—ã–º –∏–≥—Ä–æ–∫–∞–º
        print(f"\n‚ö° –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è...")
        for target_player in reactive_players:
            if target_player in protected_players:
                print(f"üõ°Ô∏è {target_player.name} –∑–∞—â–∏—â–µ–Ω –æ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∞!")
            else:
                print(f"üéØ –≠—Ñ—Ñ–µ–∫—Ç –Ω–∞ {target_player.name}")
                self.apply_card_effect(target_player, event_card, 'event')

    def should_ai_use_defense(self, ai_player, event_card, defensive_cards):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –¥–æ–ª–∂–µ–Ω –ª–∏ AI –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞—â–∏—Ç—É"""
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞—â–∏—Ç—É –µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –Ω–∞–Ω–æ—Å–∏—Ç —É—Ä–æ–Ω
        event_effects = event_card.get('effects', {})
        
        # –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –æ—Ç–Ω–∏–º–∞–µ—Ç –¥–µ–Ω—å–≥–∏, –Ω–µ—Ä–≤—ã –∏–ª–∏ –Ω–∞–Ω–æ—Å–∏—Ç –¥—Ä—É–≥–æ–π —É—Ä–æ–Ω
        if (event_effects.get('money', 0) < 0 or 
            event_effects.get('nerves', 0) < 0 or
            event_effects.get('document_level', 0) < 0):
            return True
        
        # –ï—Å–ª–∏ —É AI –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –º–∞–ª–æ —Ä–µ—Å—É—Ä—Å–æ–≤, –∑–∞—â–∏—â–∞–µ–º—Å—è –æ—Ç –ª—é–±—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        if ai_player.money < 10 or ai_player.nerves < 5:
            return True
            
        return False
    
    def take_turn(self, player):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ª–æ–≥–∏–∫–∏ —á–µ–ª–æ–≤–µ–∫–∞ –∏ AI"""
        if player == self.human_player.player:
            self.play_human_turn(player)
        else:
            self.play_ai_turn(player)
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∏–≥—Ä—ã"""
        self.setup_game()
        
        max_turns = len(self.players) * 15
        lap_frequency = max(4, min(6, self.board.size // (len(self.players) * 2)))
        
        while self.turn < max_turns and not self.game_over:
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            self.display_game_state()
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä—É–≥–∞ (–≤—ã–ø–ª–∞—Ç–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã)
            if self.turn > 0 and self.turn % lap_frequency == 0:
                print(f"\nüí∞ –ö–û–ù–ï–¶ –ö–†–£–ì–ê! –í—Å–µ –ø–æ–ª—É—á–∞—é—Ç –∑–∞—Ä–ø–ª–∞—Ç—É –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã!")
                self.handle_lap_completion()
            
            # –•–æ–¥ –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
            for player in self.players:
                if self.game_over:
                    break
                
                if player.is_eliminated:
                    continue
                
                self.take_turn(player)
                
                if self.game_over:
                    break
            
            self.turn += 1
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã
        self.display_results()
    
    def display_results(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä—ã"""
        print("\n" + "üéâ" * 20)
        print("üèÅ –ò–ì–†–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
        print("üéâ" * 20)
        
        if self.winner:
            if self.winner == self.human_player.player:
                print(f"\nüéä –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú! –í–´ –ü–û–ë–ï–î–ò–õ–ò! üéä")
            else:
                print(f"\nü§ñ –ü–æ–±–µ–¥–∏–ª AI: {self.winner.name}")
            
            print(f"üéØ –¶–µ–ª—å: {self.winner.win_condition['description']}")
        else:
            print(f"\n‚è∞ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–ª–∏–º–∏—Ç {self.turn} —Ö–æ–¥–æ–≤)")
        
        print(f"\nüìä –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print("-" * 50)
        
        for player in self.players:
            is_human = player == self.human_player.player
            prefix = "üßë –í–´" if is_human else "ü§ñ AI"
            status = "üèÜ –ü–û–ë–ï–î–ò–¢–ï–õ–¨" if player == self.winner else ("üíÄ –ò—Å–∫–ª—é—á–µ–Ω" if player.is_eliminated else "üéÆ –ò–≥—Ä–∞–ª")
            
            print(f"\n{prefix}: {player.name} - {status}")
            print(f"   üí∞ –ò—Ç–æ–≥–æ –¥–µ–Ω–µ–≥: {player.money}")
            print(f"   üß† –ò—Ç–æ–≥–æ –Ω–µ—Ä–≤–æ–≤: {player.nerves}")
            print(f"   üìÑ –£—Ä–æ–≤–µ–Ω—å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {player.document_level}")
            print(f"   üó£Ô∏è –£—Ä–æ–≤–µ–Ω—å —è–∑—ã–∫–∞: {player.language_level}")
            
            if player.win_condition:
                print(f"   üéØ –¶–µ–ª—å: {player.win_condition['description']}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        game = InteractiveGame()
        game.run()
    except KeyboardInterrupt:
        print("\n\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
