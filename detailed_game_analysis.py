#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–π –∏–≥—Ä—ã VIVA BUREAUCRACIA!
–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–¥–Ω—É –∏–≥—Ä—É —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –ª–æ–≥–∞–º–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
"""

import sys
import os
import random
import json
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Å–∏–º—É–ª—è—Ç–æ—Ä—É
sys.path.append(str(Path(__file__).parent / "simulator"))

# –ú–µ–Ω—è–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
os.chdir(Path(__file__).parent)

from core import Game
from utils import load_game_data

class DetailedGameAnalyzer:
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
    
    def __init__(self):
        self.log_entries = []
        self.turn_details = []
        self.trade_history = []
        self.elimination_history = []
        
    def log(self, message, category="INFO"):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥"""
        log_entry = {
            "category": category,
            "message": message,
            "timestamp": len(self.log_entries)
        }
        self.log_entries.append(log_entry)
        print(f"[{category}] {message}")
        
    def analyze_player_state(self, player):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–∞"""
        analysis = {
            "–∏–º—è": player.name,
            "–¥–µ–Ω—å–≥–∏": player.money,
            "–Ω–µ—Ä–≤—ã": player.nerves,
            "—è–∑—ã–∫": player.language_level,
            "–∂–∏–ª—å–µ": f"{player.housing} (—É—Ä–æ–≤–µ–Ω—å {player.housing_level})",
            "–¥–æ–∫—É–º–µ–Ω—Ç—ã": player.document_level,
            "–∫–∞—Ä—Ç_–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤": len(player.document_cards) if hasattr(player, 'document_cards') else 0,
            "–∫–∞—Ä—Ç_–¥–µ–π—Å—Ç–≤–∏–π": len(player.action_cards) if hasattr(player, 'action_cards') else 0,
            "–ø–æ–∑–∏—Ü–∏—è": player.position,
            "—Ü–µ–ª—å": player.win_condition['key'],
            "—ç–ª–∏–º–∏–Ω–∏—Ä–æ–≤–∞–Ω": getattr(player, 'is_eliminated', False)
        }
        return analysis
        
    def analyze_turn_decision(self, player, decision_type, details):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ—à–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞"""
        self.log(f"üß† –†–ï–®–ï–ù–ò–ï: {player.name} –≤—ã–±—Ä–∞–ª '{decision_type}' - {details}", "DECISION")
        
    def analyze_card_effect(self, player, card, effect_type):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –∫–∞—Ä—Ç—ã"""
        self.log(f"üé¥ –ö–ê–†–¢–ê: {player.name} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç '{card['name']}' –∫–∞–∫ {effect_type}", "CARD")
        if 'effects' in card:
            effects = []
            for key, value in card['effects'].items():
                if value > 0:
                    effects.append(f"+{value} {key}")
                elif value < 0:
                    effects.append(f"{value} {key}")
                else:
                    effects.append(f"{key}: {value}")
            self.log(f"   ‚ú® –≠—Ñ—Ñ–µ–∫—Ç—ã: {', '.join(effects)}", "EFFECT")
            
    def analyze_goal_progress(self, player):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –∫ —Ü–µ–ª–∏"""
        goal = player.win_condition
        current_state = self.analyze_player_state(player)
        
        self.log(f"üéØ –ü–†–û–ì–†–ï–°–° –ö –¶–ï–õ–ò '{goal['key']}' –¥–ª—è {player.name}:", "GOAL")
        
        if 'requires' in goal:
            for req, needed in goal['requires'].items():
                if req == 'money':
                    current = current_state['–¥–µ–Ω—å–≥–∏']
                    progress = min(100, (current / needed) * 100)
                    self.log(f"   üí∞ –î–µ–Ω—å–≥–∏: {current}/{needed} ({progress:.1f}%)", "PROGRESS")
                elif req == 'document_level':
                    current = current_state['–¥–æ–∫—É–º–µ–Ω—Ç—ã']
                    progress = min(100, (current / needed) * 100) if needed > 0 else 100
                    self.log(f"   üìã –î–æ–∫—É–º–µ–Ω—Ç—ã: {current}/{needed} ({progress:.1f}%)", "PROGRESS")
                elif req == 'language_level':
                    current = current_state['—è–∑—ã–∫']
                    progress = min(100, (current / needed) * 100) if needed > 0 else 100
                    self.log(f"   üó£Ô∏è –Ø–∑—ã–∫: {current}/{needed} ({progress:.1f}%)", "PROGRESS")
                elif req == 'nerves':
                    current = current_state['–Ω–µ—Ä–≤—ã']
                    progress = min(100, (current / needed) * 100) if needed > 0 else 100
                    self.log(f"   üò§ –ù–µ—Ä–≤—ã: {current}/{needed} ({progress:.1f}%)", "PROGRESS")
                elif req == 'housing_type':
                    current = current_state['–∂–∏–ª—å–µ']
                    status = "‚úÖ" if needed in current else "‚ùå"
                    self.log(f"   üè† –ñ–∏–ª—å–µ: {current} (–Ω—É–∂–Ω–æ: {needed}) {status}", "PROGRESS")
                    
    def analyze_trade(self, initiator, partner, offered, requested, successful, was_honest=True):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–æ—Ä–≥–æ–≤—É—é —Å–¥–µ–ª–∫—É"""
        trade_data = {
            "–∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä": initiator.name,
            "–ø–∞—Ä—Ç–Ω–µ—Ä": partner.name,
            "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ": offered,
            "–∑–∞–ø—Ä–æ—à–µ–Ω–æ": requested,
            "—É—Å–ø–µ—à–Ω–æ": successful,
            "—á–µ—Å—Ç–Ω–æ": was_honest,
            "—Ö–æ–¥": len(self.turn_details)
        }
        self.trade_history.append(trade_data)
        
        if successful:
            honesty = "—á–µ—Å—Ç–Ω–æ" if was_honest else "—Å –æ–±–º–∞–Ω–æ–º"
            self.log(f"ü§ù –¢–û–†–ì–û–í–õ–Ø: {initiator.name} ‚Üî {partner.name} ({honesty})", "TRADE")
            self.log(f"   üì§ {initiator.name} –æ—Ç–¥–∞–µ—Ç: {offered}", "TRADE")
            self.log(f"   üì• {initiator.name} –ø–æ–ª—É—á–∞–µ—Ç: {requested}", "TRADE")
            if not was_honest:
                self.log(f"   üòà –û–ë–ú–ê–ù! –°–¥–µ–ª–∫–∞ –ø—Ä–æ—à–ª–∞ –Ω–µ—á–µ—Å—Ç–Ω–æ", "DECEPTION")
        else:
            self.log(f"‚ùå –¢–û–†–ì–û–í–õ–Ø –û–¢–ö–õ–û–ù–ï–ù–ê: {partner.name} –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è {initiator.name}", "TRADE")
            
    def analyze_elimination(self, player, reason, turn):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç–ª–∏–º–∏–Ω–∞—Ü–∏—é –∏–≥—Ä–æ–∫–∞"""
        elim_data = {
            "–∏–≥—Ä–æ–∫": player.name,
            "–ø—Ä–∏—á–∏–Ω–∞": reason,
            "—Ö–æ–¥": turn,
            "—Å–æ—Å—Ç–æ—è–Ω–∏–µ": self.analyze_player_state(player)
        }
        self.elimination_history.append(elim_data)
        self.log(f"üíÄ –≠–õ–ò–ú–ò–ù–ê–¶–ò–Ø: {player.name} –≤—ã–±—ã–ª –Ω–∞ —Ö–æ–¥—É {turn} –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {reason}", "ELIMINATION")
        
    def run_detailed_game(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä—É —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º"""
        self.log("üéÆ –ó–ê–ü–£–°–ö –î–ï–¢–ê–õ–¨–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê –ò–ì–†–´ VIVA BUREAUCRACIA!", "START")
        self.log("=" * 80, "START")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        try:
            config_path = Path(__file__).parent / "simulator" / "config.json"
            with open(config_path, 'r', encoding='utf-8') as f:
                config = json.load(f)
            
            game_data = load_game_data()
            self.log("‚úÖ –î–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã", "SETUP")
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}", "ERROR")
            return None
            
        # –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—É
        try:
            game = Game(config, game_data)
            self.log(f"üé≤ –ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å {len(game.players)} –∏–≥—Ä–æ–∫–∞–º–∏", "SETUP")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.log("\nüìä –ù–ê–ß–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï –ò–ì–†–û–ö–û–í:", "SETUP")
            for player in game.players:
                state = self.analyze_player_state(player)
                self.log(f"   üë§ {state['–∏–º—è']}: {state['–¥–µ–Ω—å–≥–∏']}üí∞ {state['–Ω–µ—Ä–≤—ã']}üò§ {state['—è–∑—ã–∫']}üó£Ô∏è {state['–∂–∏–ª—å–µ']}üè†", "SETUP")
                self.log(f"      üéØ –¶–µ–ª—å: {player.win_condition['description']}", "SETUP")
                
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã: {e}", "ERROR")
            return None
            
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
        self.log("\nüöÄ –ù–ê–ß–ê–õ–û –ò–ì–†–´!", "GAME")
        self.log("=" * 80, "GAME")
        
        try:
            turn_count = 0
            max_turns = 200  # –ü—Ä–µ–¥–µ–ª –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            
            while not game.game_over and turn_count < max_turns:
                turn_count += 1
                self.log(f"\nüé≤ –•–û–î {turn_count}", "TURN")
                self.log("-" * 40, "TURN")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ö–æ–¥–∞
                turn_data = {
                    "–Ω–æ–º–µ—Ä": turn_count,
                    "—Å–æ—Å—Ç–æ—è–Ω–∏–µ_–¥–æ": {p.name: self.analyze_player_state(p) for p in game.players if not getattr(p, 'is_eliminated', False)}
                }
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Ö–æ–¥
                current_player = game.players[game.current_player_index]
                if not getattr(current_player, 'is_eliminated', False):
                    self.log(f"üë§ –•–æ–¥ –∏–≥—Ä–æ–∫–∞: {current_player.name}", "TURN")
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫ —Ü–µ–ª–∏ –ø–µ—Ä–µ–¥ —Ö–æ–¥–æ–º
                    self.analyze_goal_progress(current_player)
                    
                    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ö–æ–¥ (–∑–¥–µ—Å—å –Ω—É–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –º–µ—Ç–æ–¥ —Ö–æ–¥–∞ –∏–≥—Ä—ã)
                    # game.execute_turn(current_player)
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —Ö–æ–¥–∞
                    turn_data["—Å–æ—Å—Ç–æ—è–Ω–∏–µ_–ø–æ—Å–ª–µ"] = {p.name: self.analyze_player_state(p) for p in game.players if not getattr(p, 'is_eliminated', False)}
                    
                self.turn_details.append(turn_data)
                
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É
                game.current_player_index = (game.current_player_index + 1) % len(game.players)
                
            # –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã
            if game.game_over:
                if hasattr(game, 'winner') and game.winner:
                    self.log(f"üèÜ –ü–û–ë–ï–î–ò–¢–ï–õ–¨: {game.winner.name}!", "RESULT")
                    self.log(f"üéØ –¶–µ–ª—å: {game.winner.win_condition['description']}", "RESULT")
                    final_state = self.analyze_player_state(game.winner)
                    self.log(f"üìä –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {final_state}", "RESULT")
                else:
                    self.log("‚è∞ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –ø–æ –ª–∏–º–∏—Ç—É –≤—Ä–µ–º–µ–Ω–∏", "RESULT")
            else:
                self.log("‚ö†Ô∏è –ò–≥—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ –ª–∏–º–∏—Ç—É —Ö–æ–¥–æ–≤", "RESULT")
                
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã: {e}", "ERROR")
            import traceback
            self.log(f"üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {traceback.format_exc()}", "ERROR")
            
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        self.generate_final_report()
        
        return {
            "–ª–æ–≥–∏": self.log_entries,
            "—Ö–æ–¥—ã": self.turn_details,
            "—Ç–æ—Ä–≥–æ–≤–ª—è": self.trade_history,
            "—ç–ª–∏–º–∏–Ω–∞—Ü–∏–∏": self.elimination_history
        }
        
    def generate_final_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç"""
        self.log("\nüìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ê–ù–ê–õ–ò–ó–ê", "REPORT")
        self.log("=" * 80, "REPORT")
        
        self.log(f"üé≤ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–æ–¥–æ–≤: {len(self.turn_details)}", "REPORT")
        self.log(f"ü§ù –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫: {len(self.trade_history)}", "REPORT")
        self.log(f"üíÄ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–∏–º–∏–Ω–∞—Ü–∏–π: {len(self.elimination_history)}", "REPORT")
        
        if self.trade_history:
            successful_trades = sum(1 for t in self.trade_history if t['—É—Å–ø–µ—à–Ω–æ'])
            honest_trades = sum(1 for t in self.trade_history if t['—É—Å–ø–µ—à–Ω–æ'] and t['—á–µ—Å—Ç–Ω–æ'])
            self.log(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {successful_trades}", "REPORT")
            self.log(f"üòá –ß–µ—Å—Ç–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {honest_trades}", "REPORT")
            self.log(f"üòà –û–±–º–∞–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {successful_trades - honest_trades}", "REPORT")
            
        if self.elimination_history:
            self.log("üíÄ –î–µ—Ç–∞–ª–∏ —ç–ª–∏–º–∏–Ω–∞—Ü–∏–π:", "REPORT")
            for elim in self.elimination_history:
                self.log(f"   {elim['–∏–≥—Ä–æ–∫']} (—Ö–æ–¥ {elim['—Ö–æ–¥']}): {elim['–ø—Ä–∏—á–∏–Ω–∞']}", "REPORT")
                
        self.log("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!", "REPORT")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéÆ VIVA BUREAUCRACIA! - –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–≥—Ä—ã")
    print("=" * 60)
    
    analyzer = DetailedGameAnalyzer()
    result = analyzer.run_detailed_game()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª
    if result:
        output_file = Path(__file__).parent / "detailed_game_log.json"
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(result, f, ensure_ascii=False, indent=2)
        print(f"\nüìÑ –î–µ—Ç–∞–ª—å–Ω—ã–π –ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {output_file}")
    
    return result

if __name__ == "__main__":
    main()
